package com.paulgougassian.db.dao.wrapper;

import com.paulgougassian.common.ConnectionPool;
import com.paulgougassian.db.dao.wrapper.functions.PreparedStatementConsumer;
import com.paulgougassian.db.dao.wrapper.functions.PreparedStatementFunction;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class PreparedStatementWrapperImpl implements PreparedStatementWrapper {
    private final ConnectionPool connectionPool;

    public PreparedStatementWrapperImpl(ConnectionPool connectionPool) {
        this.connectionPool = connectionPool;
    }

    @Override
    public <T> T executeQuery(String sql, PreparedStatementFunction<? extends T> function) {
        Connection connection = connectionPool.take();

        try {
            connection.setAutoCommit(true);
            PreparedStatement ps = connection.prepareStatement(sql);
            return function.apply(ps);
        } catch (SQLException e) {
            throw new RuntimeException(
                    String.format("Unable to prepare statement: %s", e.getMessage()));
        } finally {
            connectionPool.put(connection);
        }
    }

    @Override
    public <T> T executeQuery(String sql, int autoGeneratedKeys,
                              PreparedStatementFunction<? extends T> function) {
        Connection connection = connectionPool.take();

        try {
            connection.setAutoCommit(true);
            PreparedStatement ps = connection.prepareStatement(sql, autoGeneratedKeys);
            return function.apply(ps);
        } catch (SQLException e) {
            throw new RuntimeException(
                    String.format("Unable to prepare statement: %s", e.getMessage()));
        } finally {
            connectionPool.put(connection);
        }
    }

    @Override
    public void executeUpdate(String sql, PreparedStatementConsumer consumer) {
        Connection connection = connectionPool.take();

        try {
            connection.setAutoCommit(true);
            PreparedStatement ps = connection.prepareStatement(sql);
            consumer.accept(ps);
        } catch (SQLException e) {
            throw new RuntimeException(
                    String.format("Unable to prepare statement: %s", e.getMessage()));
        } finally {
            connectionPool.put(connection);
        }
    }
}
